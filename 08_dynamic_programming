8.1. Принципы построения алгоритмов

8.2. Задача «Размен 2»
8.2.A Оптимальный размен

#include <iostream>
#include <vector>

using namespace std;

int change(int money) {

    const int max = money + 1;

    vector<int> data;

    data.resize(money + 1, max);

    data[0] = 0;

    vector<int> coins = {1, 3, 4};

    for(int i = 1; i <= money; ++i) {
        for(int c: coins) {
            if(i >= c) {
                data[i] = min(data[i], data[i - c] + 1); 
            }
        }
    }

    return data[money];  
}

int main() {
    int money;
    cin >> money;

    cout << change(money) << endl;
}

8.3. Задача «Простой калькулятор»
8.3.A Примитивный калькулятор

#include <iostream>
#include <vector>

using namespace std;

int calc(int n, vector<int>& operations) {
    const int MAX = n + 1;

    vector<int> data;

    data.resize(n + 1, MAX);

    data[1] = 0;

    for(int i = 2; i <= n; ++i) {
        data[i] = data[i-1] + 1;
        if(i % 2 == 0) {
            data[i] = min(data[i], data[i/2] + 1);
        }
        if(i % 3 == 0) {
            data[i] = min(data[i], data[i/3] + 1);
        }
    }

    int ans = data[n];

    while(n > 1) {
        operations.push_back(n);
        if(data[n] == data[n - 1] + 1) {
            n = n - 1;
        }
        else if ((n % 2 == 0) && (data[n] == 1 + data[n / 2])) {
            n = n / 2;
        }
        else if ((n % 3 == 0) && (data[n] == 1 + data[n / 3])) {
            n = n / 3;
        }
    }

    return ans;
}

int main() {
    int n;
    cin >> n;

    vector<int> operations;

    cout << calc(n, operations) << endl;
    for(int i = operations.size(); i >= 0; --i) {
        if(i == operations.size()) {
            cout << 1;
        }
        else {
            cout << ' ' << operations[i];
        }
    }
    cout << endl;

}

8.4. Задача «Расстояние редактирования»
8.4.A Расстояние редактирования

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int EditDistance(vector<char>& one, vector<char>& two) {
    int n = one.size();
    int m = two.size();
    vector<vector<int>> table(n + 1, vector<int>(m + 1));

    for(int i = 0; i <= n; ++i) {
        table[i][0] = i;
        for(int j = 0; j <= m; ++j) {
            table[0][j] = j;
        }
    }

    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j <= m; ++j) {
            int insertion = table[i][j-1] + 1;
            int deletion = table[i-1][j] + 1;
            int match = table[i-1][j-1];
            int mismatch = table[i-1][j-1] + 1;
            if(one[i-1] == two[j-1]) {
                table[i][j] = min(min(insertion, deletion), match);  
            }
            else {
                table[i][j] = min(min(insertion, deletion), mismatch);
            }
        }
    }
    return table[n][m];
}

int main() {
    string s1, s2;

    cin >> s1 >> s2;

    vector<char> w1(s1.begin(), s1.end());
    vector<char> w2(s2.begin(), s2.end());

    cout << EditDistance(w1, w2);

}

8.5. Задача LCS
8.5.A. Наибольшая общая подпоследовательность

#include <iostream>
#include <string>
#include <vector>

using namespace std;

int EditDistance(vector<int>& one, vector<int>& two) {
    int n = one.size();
    int m = two.size();
    vector<vector<int>> table(n + 1, vector<int>(m + 1));

    for(int i = 0; i <= n; ++i) {
        table[i][0] = 0;
    }

    for(int j = 0; j <= m; ++j) {
        table[0][j] = 0;
    }

    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j <= m; ++j) {
            table[i][j] = table[i-1][j];
            table[i][j] = max(table[i][j], table[i][j-1]);
            if(one[i-1] == two[j-1]) {
                table[i][j] = max(table[i][j], table[i-1][j-1] + 1);  
            }
        }
    }
    return table[n][m];
}

int main() {

    int a, b;
    cin >> a;
    vector<int> one(a);

    for(int i = 0; i < a; ++i) {
        cin >> one[i];
    }

    cin >> b;
    vector<int> two(b);

    for(int j = 0; j < b; ++j) {
        cin >> two[j];
    }

    cout << EditDistance(one, two) << endl;
}

8.5.B. Наибольшая общая подпоследовательность трех последовательностей
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int EditDistance(vector<int>& one, vector<int>& two, vector<int>& three) {
    int n = one.size();
    int m = two.size();
    int k = three.size();
    vector<vector<vector<int>>> table(n + 1, vector<vector<int>>(m + 1, vector<int>(k + 1, 0)));

    for(int i = 1; i <= n; ++i) {
        for(int j = 1; j <= m; ++j) {
            for(int z = 1; z <= k; ++z) {
                table[i][j][z] = max(table[i][j][z], table[i-1][j][z]);
                table[i][j][z] = max(table[i][j][z], table[i][j-1][z]);
                table[i][j][z] = max(table[i][j][z], table[i][j][z-1]);
                if(one[i-1] == two[j-1] && one[i-1] == three[z-1]) {
                    table[i][j][z] = max(table[i][j][z], table[i-1][j-1][z-1] + 1);  
                }
            }
        }
    }
    return table[n][m][k];
}

int main() {

    int a, b, c;
    cin >> a;
    vector<int> one(a);

    for(int i = 0; i < a; ++i) {
        cin >> one[i];
    }

    cin >> b;
    vector<int> two(b);

    for(int j = 0; j < b; ++j) {
        cin >> two[j];
    }

    cin >> c;
    vector<int> three(c);

    for(int z = 0; z < c; ++z) {
        cin >> three[z];
    }

    cout << EditDistance(one, two, three) << endl;
}

8.6. Задача о рюкзаке
8.6.A Наибольшее количество золота

#include <iostream>
#include <vector>

using namespace std;

int rucksack(int w, int size, vector<int>& weights) {
    vector<int> table(w+1, 0);

    for(int i = 0; i < size; ++i) {
        for(int j = w; j >= weights[i]; --j) {
            table[j] = max(table[j], table[j - weights[i]] + weights[i]); 
        }
    }
    return table[w];
}

int main() {
    int w, size;
    cin >> w >> size;
    vector<int> weights(size);

    for(int i = 0; i < size; ++i) {
        cin >> weights[i];
    }

    cout << rucksack(w, size, weights) << endl;
}

8.7. Задача «Сувениры»
8.7.А Распределение сувениров
#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>

bool canPartitionToThree(std::vector<int>& values, int n) {
    int sum = std::accumulate(values.begin(), values.end(), 0);
    if (sum % 3 != 0) return false;
    int target = sum / 3;
    
    std::vector<bool> dp(1 << n, false);
    dp[0] = true;
    std::vector<int> total(1 << n, 0);
    
    for (int mask = 0; mask < (1 << n); ++mask) {
        if (!dp[mask]) continue;
        for (int i = 0; i < n; ++i) {
            if (!(mask & (1 << i)) && total[mask] + values[i] <= target) {
                int newMask = mask | (1 << i);
                dp[newMask] = true;
                total[newMask] = (total[mask] + values[i]) % target;
            }
        }
    }
    
    return dp[(1 << n) - 1];
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> values(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> values[i];
    }
    
    if (canPartitionToThree(values, n)) {
        std::cout << 1 << std::endl;
    } else {
        std::cout << 0 << std::endl;
    }

    return 0;
}

8.8. Задача «Расставить скобки»
